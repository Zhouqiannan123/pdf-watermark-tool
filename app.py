#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PDFÊ∞¥Âç∞Â∑•ÂÖ∑ - VercelÈÉ®ÁΩ≤ÁâàÊú¨
Êï¥Âêà‰∫ÜÊâÄÊúâÂäüËÉΩÂà∞Âçï‰∏™Êñá‰ª∂‰∏≠
"""

from flask import Flask, request, send_file, render_template_string, jsonify
import os
import re
import sys
import glob
import tempfile
import zipfile
from werkzeug.utils import secure_filename
import io
from PIL import Image
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.colors import Color

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MBÈôêÂà∂

class WatermarkTool:
    def __init__(self):
        self.default_watermark_text = "ÊúãÈò≥ÊâòËæÖÂÜÖÈÉ®‰∏ìÁî®ËµÑÊñô"
        self.default_font_size = 32
        self.default_opacity = 0.35
        self.default_rotation = 45
        
    def extract_page_number(self, filename):
        """‰ªéÊñá‰ª∂Âêç‰∏≠ÊèêÂèñÈ°µÁ†ÅÊï∞Â≠ó"""
        match = re.search(r'È°µÈù¢_(\d+)', filename)
        if match:
            return int(match.group(1))
        return 0

    def create_pdf_from_images(self, image_folder, output_pdf):
        """Â∞ÜÂõæÁâáÊåâÈ°µÁ†ÅÈ°∫Â∫èÂêàÂπ∂ÊàêPDF"""
        print(f"Ê≠£Âú®Êâ´ÊèèÂõæÁâáÊñá‰ª∂Â§π: {image_folder}")
        
        # ÊîØÊåÅÁöÑÂõæÁâáÊ†ºÂºè
        image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
        image_files = []
        
        for ext in image_extensions:
            image_files.extend(glob.glob(os.path.join(image_folder, ext)))
            image_files.extend(glob.glob(os.path.join(image_folder, ext.upper())))
        
        print(f"ÊâæÂà∞ {len(image_files)} ‰∏™ÂõæÁâáÊñá‰ª∂")
        
        if not image_files:
            print("ÈîôËØØÔºöÊ≤°ÊúâÊâæÂà∞ÂõæÁâáÊñá‰ª∂")
            return False
        
        # ÊåâÈ°µÁ†ÅÊéíÂ∫è
        image_files.sort(key=lambda x: self.extract_page_number(os.path.basename(x)))
        
        print("ÂºÄÂßãËΩ¨Êç¢ÂõæÁâá‰∏∫PDF...")
        
        # ËΩ¨Êç¢Á¨¨‰∏ÄÂº†ÂõæÁâá
        first_image = Image.open(image_files[0])
        if first_image.mode != 'RGB':
            first_image = first_image.convert('RGB')
        
        # ÂáÜÂ§áÂÖ∂‰ªñÂõæÁâá
        other_images = []
        for i, img_path in enumerate(image_files[1:], 1):
            if i % 10 == 0:
                print(f"Â§ÑÁêÜÁ¨¨ {i+1} Âº†ÂõæÁâá...")
            
            img = Image.open(img_path)
            if img.mode != 'RGB':
                img = img.convert('RGB')
            other_images.append(img)
        
        # ‰øùÂ≠ò‰∏∫PDF
        print(f"Ê≠£Âú®‰øùÂ≠òPDFÊñá‰ª∂: {output_pdf}")
        first_image.save(
            output_pdf,
            save_all=True,
            append_images=other_images,
            format='PDF'
        )
        
        print(f"‚úÖ PDFÂàõÂª∫ÊàêÂäüÔºÅÂåÖÂê´ {len(image_files)} È°µ")
        return True

    def create_watermark_pdf(self, width, height, watermark_text, font_size):
        """ÂàõÂª∫Ê∞¥Âç∞PDF"""
        packet = io.BytesIO()
        c = canvas.Canvas(packet, pagesize=(width, height))
        
        # ‰ΩøÁî®ÈªòËÆ§Â≠ó‰ΩìÔºåÈÅøÂÖçÂ≠ó‰ΩìÊ≥®ÂÜåÈóÆÈ¢ò
        font_name = 'Helvetica'
        
        # Â¶ÇÊûúÂåÖÂê´‰∏≠ÊñáÔºå‰ΩøÁî®Ëã±ÊñáÊõø‰ª£
        if any(ord(char) > 127 for char in watermark_text):
            watermark_text = "PENYANG TUTOR INTERNAL USE ONLY"
        
        # ËÆæÁΩÆÂ≠ó‰Ωì
        c.setFont(font_name, font_size)
        c.setFillColor(Color(0, 0, 0, alpha=self.default_opacity))
        
        # Ê†πÊçÆÂ≠ó‰ΩìÂ§ßÂ∞èË∞ÉÊï¥Â∏ÉÂ±ÄÂØÜÂ∫¶
        if font_size <= 24:
            rows, cols = 6, 2  # Â∞èÂ≠ó‰ΩìÔºåÂØÜÈõÜÂ∏ÉÂ±Ä
        elif font_size <= 32:
            rows, cols = 5, 2  # ‰∏≠Á≠âÂ≠ó‰Ωì
        elif font_size <= 40:
            rows, cols = 4, 2  # Â§ßÂ≠ó‰Ωì
        else:
            rows, cols = 3, 2  # Ë∂ÖÂ§ßÂ≠ó‰ΩìÔºåÁ®ÄÁñèÂ∏ÉÂ±Ä
        
        row_spacing = height / (rows + 1)
        col_spacing = width / (cols + 1)
        
        for row in range(rows):
            for col in range(cols):
                x = col_spacing * (col + 1)
                y = height - row_spacing * (row + 1)
                
                c.saveState()
                c.translate(x, y)
                c.rotate(self.default_rotation)
                
                text_width = c.stringWidth(watermark_text, font_name, font_size)
                c.drawString(-text_width/2, -font_size/2, watermark_text)
                
                c.restoreState()
        
        c.save()
        packet.seek(0)
        return packet

    def add_watermark_to_pdf(self, input_pdf, output_pdf, watermark_text, font_size):
        """‰∏∫PDFÊ∑ªÂä†Ê∞¥Âç∞"""
        try:
            reader = PdfReader(input_pdf)
            writer = PdfWriter()
            
            print(f"Ê≠£Âú®‰∏∫PDFÊ∑ªÂä†Ê∞¥Âç∞ÔºåÊÄªÈ°µÊï∞: {len(reader.pages)}")
            
            for page_num, page in enumerate(reader.pages):
                if page_num % 20 == 0:
                    print(f"Ê∑ªÂä†Ê∞¥Âç∞Âà∞Á¨¨ {page_num + 1} È°µ...")
                
                # Ëé∑ÂèñÈ°µÈù¢Â∞∫ÂØ∏
                page_box = page.mediabox
                page_width = float(page_box.width)
                page_height = float(page_box.height)
                
                # ÂàõÂª∫Ê∞¥Âç∞
                watermark_packet = self.create_watermark_pdf(
                    page_width, page_height, watermark_text, font_size
                )
                watermark_reader = PdfReader(watermark_packet)
                watermark_page = watermark_reader.pages[0]
                
                # ÂêàÂπ∂Ê∞¥Âç∞
                page.merge_page(watermark_page)
                writer.add_page(page)
            
            # ‰øùÂ≠òÁªìÊûú
            with open(output_pdf, 'wb') as output_file:
                writer.write(output_file)
            
            print(f"‚úÖ Ê∞¥Âç∞Ê∑ªÂä†ÂÆåÊàêÔºÅ")
            return True
            
        except Exception as e:
            print(f"Ê∑ªÂä†Ê∞¥Âç∞Êó∂Âá∫Èîô: {e}")
            return False

# HTMLÊ®°Êùø
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîß PDFÊ∞¥Âç∞Â∑•ÂÖ∑ - Âú®Á∫øÁâà</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Arial', sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 800px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .header { 
            background: linear-gradient(45deg, #667eea, #764ba2); 
            color: white; 
            padding: 30px; 
            text-align: center; 
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.1em; opacity: 0.9; }
        .content { padding: 40px; }
        .upload-section { 
            border: 3px dashed #667eea; 
            border-radius: 10px; 
            padding: 40px; 
            text-align: center; 
            margin-bottom: 30px;
            transition: all 0.3s ease;
        }
        .upload-section:hover { 
            border-color: #764ba2; 
            background: #f8f9ff; 
        }
        .upload-section h3 { color: #667eea; margin-bottom: 15px; }
        .file-input { 
            margin: 10px 0; 
            padding: 12px; 
            border: 2px solid #ddd; 
            border-radius: 8px; 
            width: 100%; 
            font-size: 16px;
        }
        .settings { 
            background: #f8f9ff; 
            padding: 25px; 
            border-radius: 10px; 
            margin-bottom: 30px; 
        }
        .settings h3 { color: #667eea; margin-bottom: 20px; }
        .form-group { margin-bottom: 20px; }
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: bold; 
            color: #333; 
        }
        .form-group input, .form-group select { 
            width: 100%; 
            padding: 12px; 
            border: 2px solid #ddd; 
            border-radius: 8px; 
            font-size: 16px;
        }
        .btn { 
            background: linear-gradient(45deg, #667eea, #764ba2); 
            color: white; 
            padding: 15px 30px; 
            border: none; 
            border-radius: 8px; 
            font-size: 18px; 
            cursor: pointer; 
            width: 100%; 
            transition: all 0.3s ease;
        }
        .btn:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 5px 15px rgba(0,0,0,0.2); 
        }
        .btn:disabled { 
            opacity: 0.6; 
            cursor: not-allowed; 
            transform: none; 
        }
        .progress { 
            display: none; 
            margin-top: 20px; 
            text-align: center; 
        }
        .progress-bar { 
            background: #f0f0f0; 
            height: 10px; 
            border-radius: 5px; 
            overflow: hidden; 
            margin: 10px 0; 
        }
        .progress-fill { 
            background: linear-gradient(45deg, #667eea, #764ba2); 
            height: 100%; 
            width: 0%; 
            transition: width 0.3s ease; 
        }
        .result { 
            display: none; 
            background: #e8f5e8; 
            border: 2px solid #4caf50; 
            border-radius: 10px; 
            padding: 20px; 
            text-align: center; 
            margin-top: 20px; 
        }
        .features { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
            gap: 20px; 
            margin-top: 30px; 
        }
        .feature { 
            text-align: center; 
            padding: 20px; 
            background: #f8f9ff; 
            border-radius: 10px; 
        }
        .feature h4 { color: #667eea; margin-bottom: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîß PDFÊ∞¥Âç∞Â∑•ÂÖ∑</h1>
            <p>Âú®Á∫ø‰∏∫PDFÊ∑ªÂä†Ê∞¥Âç∞ | ÊîØÊåÅÂõæÁâáÊñá‰ª∂Â§πËΩ¨PDF</p>
        </div>
        
        <div class="content">
            <form id="watermarkForm" enctype="multipart/form-data">
                <div class="upload-section">
                    <h3>üìÅ ÈÄâÊã©Êñá‰ª∂</h3>
                    <div style="margin-bottom: 20px;">
                        <label>
                            <input type="radio" name="mode" value="pdf" checked> 
                            üìÑ ‰∏ä‰º†PDFÊñá‰ª∂
                        </label>
                        <label style="margin-left: 20px;">
                            <input type="radio" name="mode" value="folder"> 
                            üìÅ ‰∏ä‰º†ÂõæÁâáZIPÂåÖ
                        </label>
                    </div>
                    <input type="file" id="fileInput" class="file-input" accept=".pdf,.zip" required>
                    <p style="color: #666; margin-top: 10px;">
                        PDFÊ®°ÂºèÔºöÊîØÊåÅPDFÊñá‰ª∂ | Êñá‰ª∂Â§πÊ®°ÂºèÔºöÊîØÊåÅÂåÖÂê´ÂõæÁâáÁöÑZIPÊñá‰ª∂
                    </p>
                </div>
                
                <div class="settings">
                    <h3>üé® Ê∞¥Âç∞ËÆæÁΩÆ</h3>
                    <div class="form-group">
                        <label for="watermarkText">Ê∞¥Âç∞ÊñáÂ≠ó</label>
                        <input type="text" id="watermarkText" name="watermarkText" 
                               value="PENYANG TUTOR INTERNAL USE" placeholder="ËæìÂÖ•Ê∞¥Âç∞ÊñáÂ≠ó">
                    </div>
                    <div class="form-group">
                        <label for="fontSize">Â≠ó‰ΩìÂ§ßÂ∞è (px)</label>
                        <input type="range" id="fontSize" name="fontSize" 
                               min="20" max="50" value="32" 
                               oninput="document.getElementById('fontSizeValue').textContent = this.value">
                        <span id="fontSizeValue">32</span> px
                    </div>
                </div>
                
                <button type="submit" class="btn" id="submitBtn">
                    üöÄ ÂºÄÂßãÂ§ÑÁêÜ
                </button>
            </form>
            
            <div class="progress" id="progress">
                <p>Ê≠£Âú®Â§ÑÁêÜ‰∏≠ÔºåËØ∑Á®çÂÄô...</p>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
            </div>
            
            <div class="result" id="result">
                <h3>‚úÖ Â§ÑÁêÜÂÆåÊàêÔºÅ</h3>
                <p id="resultMessage"></p>
                <a id="downloadLink" class="btn" style="display: inline-block; margin-top: 15px; text-decoration: none;">
                    ‚¨áÔ∏è ‰∏ãËΩΩÊñá‰ª∂
                </a>
            </div>
            
            <div class="features">
                <div class="feature">
                    <h4>üéØ Êô∫ËÉΩÂ∏ÉÂ±Ä</h4>
                    <p>Ê†πÊçÆÂ≠ó‰ΩìÂ§ßÂ∞èËá™Âä®Ë∞ÉÊï¥Ê∞¥Âç∞ÂØÜÂ∫¶Âíå‰ΩçÁΩÆ</p>
                </div>
                <div class="feature">
                    <h4>üî§ Ëã±ÊñáÊîØÊåÅ</h4>
                    <p>ÊîØÊåÅËã±ÊñáÊ∞¥Âç∞ÊñáÂ≠óÊòæÁ§∫</p>
                </div>
                <div class="feature">
                    <h4>üì± ÊâπÈáèÂ§ÑÁêÜ</h4>
                    <p>ÊîØÊåÅÂ§ßÊñá‰ª∂ÂíåÂ§öÈ°µÈù¢PDFÂ§ÑÁêÜ</p>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        const form = document.getElementById('watermarkForm');
        const submitBtn = document.getElementById('submitBtn');
        const progress = document.getElementById('progress');
        const result = document.getElementById('result');
        const fileInput = document.getElementById('fileInput');
        const modeRadios = document.querySelectorAll('input[name="mode"]');
        
        // Ê†πÊçÆÊ®°ÂºèÂàáÊç¢Êñá‰ª∂Á±ªÂûã
        modeRadios.forEach(radio => {
            radio.addEventListener('change', function() {
                if (this.value === 'pdf') {
                    fileInput.accept = '.pdf';
                } else {
                    fileInput.accept = '.zip';
                }
            });
        });
        
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData();
            const file = fileInput.files[0];
            const mode = document.querySelector('input[name="mode"]:checked').value;
            const watermarkText = document.getElementById('watermarkText').value;
            const fontSize = document.getElementById('fontSize').value;
            
            if (!file) {
                alert('ËØ∑ÈÄâÊã©Êñá‰ª∂');
                return;
            }
            
            formData.append('file', file);
            formData.append('mode', mode);
            formData.append('watermarkText', watermarkText);
            formData.append('fontSize', fontSize);
            
            // ÊòæÁ§∫ËøõÂ∫¶
            submitBtn.disabled = true;
            progress.style.display = 'block';
            result.style.display = 'none';
            
            try {
                const response = await fetch('/process', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const filename = response.headers.get('Content-Disposition')
                        ?.split('filename=')[1]?.replace(/"/g, '') || 'watermarked.pdf';
                    
                    document.getElementById('downloadLink').href = url;
                    document.getElementById('downloadLink').download = filename;
                    document.getElementById('resultMessage').textContent = 
                        `Êñá‰ª∂Â§ÑÁêÜÂÆåÊàêÔºÅÂ§ßÂ∞è: ${(blob.size / 1024 / 1024).toFixed(2)} MB`;
                    
                    result.style.display = 'block';
                } else {
                    const error = await response.text();
                    alert('Â§ÑÁêÜÂ§±Ë¥•: ' + error);
                }
            } catch (error) {
                alert('‰∏ä‰º†Â§±Ë¥•: ' + error.message);
            } finally {
                submitBtn.disabled = false;
                progress.style.display = 'none';
            }
        });
    </script>
</body>
</html>
'''

@app.route('/')
def index():
    """‰∏ªÈ°µ"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/process', methods=['POST'])
def process_file():
    """Â§ÑÁêÜ‰∏ä‰º†ÁöÑÊñá‰ª∂"""
    try:
        # Ëé∑ÂèñÂèÇÊï∞
        mode = request.form.get('mode', 'pdf')
        watermark_text = request.form.get('watermarkText', 'PENYANG TUTOR INTERNAL USE')
        font_size = int(request.form.get('fontSize', 32))
        
        if 'file' not in request.files:
            return 'Ê≤°Êúâ‰∏ä‰º†Êñá‰ª∂', 400
        
        file = request.files['file']
        if file.filename == '':
            return 'Ê≤°ÊúâÈÄâÊã©Êñá‰ª∂', 400
        
        # ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï
        with tempfile.TemporaryDirectory() as temp_dir:
            input_path = os.path.join(temp_dir, secure_filename(file.filename))
            file.save(input_path)
            
            tool = WatermarkTool()
            
            if mode == 'pdf':
                # PDFÊ®°Âºè
                output_path = os.path.join(temp_dir, 'output_watermarked.pdf')
                success = tool.add_watermark_to_pdf(
                    input_path, output_path, watermark_text, font_size
                )
                output_filename = f"{os.path.splitext(file.filename)[0]}_Â∏¶Ê∞¥Âç∞.pdf"
                
            else:
                # Êñá‰ª∂Â§πÊ®°Âºè
                extract_dir = os.path.join(temp_dir, 'extracted')
                os.makedirs(extract_dir)
                
                # Ëß£ÂéãZIPÊñá‰ª∂
                with zipfile.ZipFile(input_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
                
                output_path = os.path.join(temp_dir, 'output_from_images.pdf')
                
                # ÂÖàËΩ¨Êç¢‰∏∫PDFÔºåÂÜçÊ∑ªÂä†Ê∞¥Âç∞
                temp_pdf = os.path.join(temp_dir, 'temp_from_images.pdf')
                if tool.create_pdf_from_images(extract_dir, temp_pdf):
                    success = tool.add_watermark_to_pdf(
                        temp_pdf, output_path, watermark_text, font_size
                    )
                else:
                    success = False
                    
                output_filename = f"{os.path.splitext(file.filename)[0]}_Â∏¶Ê∞¥Âç∞.pdf"
            
            if not success:
                return 'Â§ÑÁêÜÂ§±Ë¥•', 500
            
            # ËøîÂõûÂ§ÑÁêÜÂêéÁöÑÊñá‰ª∂
            return send_file(
                output_path,
                as_attachment=True,
                download_name=output_filename,
                mimetype='application/pdf'
            )
            
    except Exception as e:
        return f'Â§ÑÁêÜÂá∫Èîô: {str(e)}', 500

@app.route('/health')
def health():
    """ÂÅ•Â∫∑Ê£ÄÊü•"""
    return {'status': 'ok', 'message': 'PDFÊ∞¥Âç∞Â∑•ÂÖ∑ËøêË°åÊ≠£Â∏∏'}

# VercelÈúÄË¶ÅÁöÑhandler
def handler(event, context):
    return app(event, context)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
